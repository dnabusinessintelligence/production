"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["info"] = 0] = "info";
    LogLevel[LogLevel["debug"] = 1] = "debug";
    LogLevel[LogLevel["log"] = 2] = "log";
    LogLevel[LogLevel["warn"] = 3] = "warn";
    LogLevel[LogLevel["error"] = 4] = "error";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
exports.CanLog = function (base) { return /** @class */ (function (_super) {
    __extends(CanLog, _super);
    function CanLog() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.logLevel = LogLevel.warn;
        return _this;
    }
    CanLog.prototype.printLn = function (message) {
        throw "Abstract method";
    };
    CanLog.prototype.info = function (message) {
        if (this.logLevel <= LogLevel.info)
            this.printLn(message);
    };
    CanLog.prototype.debug = function (message) {
        if (this.logLevel <= LogLevel.debug)
            this.printLn(message);
    };
    CanLog.prototype.log = function (message) {
        if (this.logLevel <= LogLevel.log)
            this.printLn(message);
    };
    CanLog.prototype.warn = function (message) {
        if (this.logLevel <= LogLevel.warn)
            this.printLn(message);
    };
    CanLog.prototype.error = function (message) {
        if (this.logLevel <= LogLevel.error)
            this.printLn(message);
    };
    return CanLog;
}(base)); };
