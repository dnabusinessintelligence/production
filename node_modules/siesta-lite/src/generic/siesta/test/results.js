"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var IndexNode_js_1 = require("../../index/IndexNode.js");
var Common_js_1 = require("../../util/Common.js");
var GenericAssertion = /** @class */ (function (_super) {
    __extends(GenericAssertion, _super);
    function GenericAssertion() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return GenericAssertion;
}(IndexNode_js_1.IndexNode(Common_js_1.Base)));
exports.GenericAssertion = GenericAssertion;
var Assertion = /** @class */ (function (_super) {
    __extends(Assertion, _super);
    function Assertion() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Assertion;
}(GenericAssertion));
exports.Assertion = Assertion;
var WaitForAssertion = /** @class */ (function (_super) {
    __extends(WaitForAssertion, _super);
    function WaitForAssertion() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.completed = false;
        return _this;
    }
    return WaitForAssertion;
}(Assertion));
exports.WaitForAssertion = WaitForAssertion;
var Exception = /** @class */ (function (_super) {
    __extends(Exception, _super);
    function Exception() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Exception;
}(GenericAssertion));
exports.Exception = Exception;
var LogMessage = /** @class */ (function (_super) {
    __extends(LogMessage, _super);
    function LogMessage() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return LogMessage;
}(IndexNode_js_1.IndexNode(Common_js_1.Base)));
exports.LogMessage = LogMessage;
var SubTest = /** @class */ (function (_super) {
    __extends(SubTest, _super);
    function SubTest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return SubTest;
}(IndexNode_js_1.IndexNode(Common_js_1.Base)));
exports.SubTest = SubTest;
